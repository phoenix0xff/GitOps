name: Simulate Fault (GitOps - minimal)

on:
  workflow_dispatch:
    inputs:
      duration_minutes:
        description: Minutes to keep the fault before auto-fix
        required: true
        default: "5"

env:
  APP_NAME: node-app
  MANIFEST_PATH: manifest/deployment.yaml
  GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
  GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  simulate-readiness-fault:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          token: ${{ env.PERSONAL_ACCESS_TOKEN }}

      - name: Set up git
        run: |
          git config user.name  "${{ env.GIT_USERNAME }}"
          git config user.email "${{ env.GIT_EMAIL }}"

      - name: Install yq
        uses: mikefarah/yq@v4.44.3

      - name: Inject faulty readinessProbe
        id: inject
        shell: bash
        run: |
          set -euo pipefail
          FILE="${{ env.MANIFEST_PATH }}"
          APP="${{ env.APP_NAME }}"
          echo "Injecting bad readinessProbe into $FILE"
          cp "$FILE" "${FILE}.bak"

          # 1) Ensure readinessProbe exists, then set an invalid path
          yq -i '
            (.spec.template.spec.containers[] | select(.name == strenv(APP))).readinessProbe =
              {"httpGet":{"path":"/nonexistent-health","port":3000},"initialDelaySeconds":5,"periodSeconds":5}
          ' "$FILE"

          # 2) New annotation to force a new rollout every run
          TS=$(date -u +%Y%m%d%H%M%S)
          yq -i '
            .spec.template.metadata.annotations = (.spec.template.metadata.annotations // {}) |
            .spec.template.metadata.annotations["sim-fault-run"] = strenv(TS)
          ' "$FILE"

          echo "Preview of readinessProbe after edit:"
          yq e '.spec.template.spec.containers[] | select(.name == strenv(APP)).readinessProbe' "$FILE" || true

          # 3) Commit only if there is an actual diff
          if git diff --quiet -- "$FILE"; then
            echo "No content change detected; skipping commit."
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            git add "$FILE"
            git commit -m "FAULT start: readinessProbe broken for $APP (sim-fault-run=$TS)"
            git push
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Hold fault
        run: |
          echo "Keeping fault for ${{ github.event.inputs.duration_minutes }} minutes..."
          sleep $(( 60 * ${{ github.event.inputs.duration_minutes }} ))

      - name: Revert fault (auto-fix)
        run: |
          FILE="${{ env.MANIFEST_PATH }}"
          echo "Reverting manifest to healthy state"
          git revert --no-edit HEAD || {
            echo "git revert failed; restoring backup"
            cp "${FILE}.bak" "$FILE"
            git add "$FILE"
            git commit -m "FAULT end: restore original manifest"
          }
          git push
