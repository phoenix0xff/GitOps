name: Simulate Fault (GitOps - minimal)

on:
  workflow_dispatch:
    inputs:
      duration_minutes:
        description: Minutes to keep the fault before auto-fix
        required: true
        default: "5"

env:
  MANIFEST_PATH: manifest/deployment.yaml
  GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
  GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  simulate-readiness-fault:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          token: ${{ env.PERSONAL_ACCESS_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name  "${{ env.GIT_USERNAME }}"
          git config user.email "${{ env.GIT_EMAIL }}"

      - name: Install yq
        run: |
          curl -sL https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq --version

      - name: Inject faulty readinessProbe
        id: inject
        shell: bash
        run: |
          set -euo pipefail
          FILE="${{ env.MANIFEST_PATH }}"

          # Flip readiness path to a guaranteed-bad endpoint
          yq -i '
            .spec.template.spec.containers[0].readinessProbe.httpGet.path = "/nonexistent-health"
          ' "$FILE"

          # Force a rollout by bumping an annotation
          export TS=$(date -u +%Y%m%d%H%M%S)
          yq -i '
            .spec.template.metadata.annotations = (.spec.template.metadata.annotations // {}) |
            .spec.template.metadata.annotations["sim-fault-run"] = strenv(TS)
          ' "$FILE"

          # Commit only if file changed
          if git diff --quiet -- "$FILE"; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git add "$FILE"
          git commit -m "FAULT start: readinessProbe broken (sim-fault-run=$TS)"
          git push
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Hold fault
        if: steps.inject.outputs.changed == 'true'
        run: sleep $(( 60 * ${{ github.event.inputs.duration_minutes }} ))

      - name: Revert fault (auto-fix)
        if: steps.inject.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git revert --no-edit HEAD
          git push